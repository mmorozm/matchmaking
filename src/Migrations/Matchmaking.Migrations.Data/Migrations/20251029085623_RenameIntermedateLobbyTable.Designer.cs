// <auto-generated />
using System;
using Matchmaking.Migrations.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Matchmaking.Migrations.Data.Migrations
{
    [DbContext(typeof(MatchmakingDbContext))]
    [Migration("20251029085623_RenameIntermedateLobbyTable")]
    partial class RenameIntermedateLobbyTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Matchmaking.Models.Domain.IntermediateLobby", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ClientVersion")
                        .HasColumnType("bigint");

                    b.Property<int>("DevicePreferences")
                        .HasColumnType("integer");

                    b.Property<int>("PlatformGroupId")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("Regions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("PlatformGroupId");

                    b.ToTable("IntermediateLobby");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("SupportedInputs")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.MatchReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Present")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PresentChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Registered")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.PlatformGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string[]>("Group")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("MaxPlayersOverride")
                        .HasColumnType("integer");

                    b.Property<int?>("MinPlayersOverride")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlaylistType")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamCountOverride")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("EnableBots")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<int>("MinPlayers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ClientVersion")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("IntermediateLobbyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LateJoinTicketId")
                        .HasColumnType("uuid");

                    b.Property<int>("OriginalInput")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("Party")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<int[]>("Regions")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("SelectedInput")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IntermediateLobbyId");

                    b.HasIndex("LateJoinTicketId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.IntermediateLobby", b =>
                {
                    b.HasOne("Matchmaking.Models.Domain.PlatformGroup", "Group")
                        .WithMany()
                        .HasForeignKey("PlatformGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Match", b =>
                {
                    b.HasOne("Matchmaking.Models.Domain.PlatformGroup", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Matchmaking.Models.Domain.Playlist", "Playlist")
                        .WithMany()
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Matchmaking.Models.Domain.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("Playlist");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.MatchReservation", b =>
                {
                    b.HasOne("Matchmaking.Models.Domain.Match", "Match")
                        .WithMany("Reservations")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Matchmaking.Models.Domain.Ticket", "Ticket")
                        .WithOne("Reservation")
                        .HasForeignKey("Matchmaking.Models.Domain.MatchReservation", "TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Scenario", b =>
                {
                    b.HasOne("Matchmaking.Models.Domain.Playlist", "Playlist")
                        .WithMany("Scenarios")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Ticket", b =>
                {
                    b.HasOne("Matchmaking.Models.Domain.IntermediateLobby", "IntermediateLobby")
                        .WithMany()
                        .HasForeignKey("IntermediateLobbyId");

                    b.HasOne("Matchmaking.Models.Domain.Ticket", "LateJoinTicket")
                        .WithMany("ChildTickets")
                        .HasForeignKey("LateJoinTicketId");

                    b.Navigation("IntermediateLobby");

                    b.Navigation("LateJoinTicket");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Match", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Playlist", b =>
                {
                    b.Navigation("Scenarios");
                });

            modelBuilder.Entity("Matchmaking.Models.Domain.Ticket", b =>
                {
                    b.Navigation("ChildTickets");

                    b.Navigation("Reservation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
